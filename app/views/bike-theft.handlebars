  <div id="header">
    <h2>COBI.Bike Hello World</h2>
  </div>

  <div id='master' class='my-content {{display_style}}'>
    <div id="speed">{{message }}</div>
      <p>-</p>
      <div id="safety_message"></div>
      <p>-</p>
      <div id='credit' ><font size="1">Credits: API provided by Bike Index - bikeindex.org</font></div>
  </div>

  <div id="cobi-thumbnail">
    <img src="https://cdn.glitch.com/a8410dbe-26b4-49d1-9343-b70acf2ecb1a%2FCOBI_logo_neg_15mm_rgb_no-claim.png?1533568547538" width="150" height="50">
  </div>

  <script src="https://code.jquery.com/jquery-3.1.1.min.js"></script>

  <!-- COBI.JS -->
  <script src="https://cdn.cobi.bike/cobi.js/0.44.0/cobi.js"></script>
  <script>

    // Authenticate your module
    COBI.init('token');

    //var misc = require('misc');

    // Subscribe to a data service
    COBI.rideService.speed.subscribe(function(speed) {      
      $('#speed').html(`You are riding at ${ speed.toFixed(2) } m/s`);
     });

 
    var _lat1 = 0 ;
    var _lon1 = 0;
    var _initial =true;

    COBI.mobile.location.subscribe(function(location) {   

      if(typeof location.coordinate.latitude == "undefined" || location.coordinate.latitude == null || location.coordinate.longitude == null){
        return;
      }

      if(_lat1==0){
        console.log('Log - set lat/lon 1st time');
        _lat1 = location.coordinate.latitude;
        _lon1 = location.coordinate.longitude;
        console.log('Log -new _lat1 '+ _lat1);
        console.log('Log -new _lon1 '+ _lon1);
      }

      var dist = distance(_lat1, _lon1, location.coordinate.latitude, location.coordinate.longitude, 'K');

      //Only check for incidents after travelled distance >= 1 KM  
      if(dist >= 0.1 || _initial ){
          console.log('Log - now check for incidents');
          updateMessage(location.coordinate.latitude,location.coordinate.longitude);
          _lat1 = location.coordinate.latitude;
          _lon1 = location.coordinate.longitude; 
          _initial=false;              
        }
      else{
        console.log('Log - do not check for incidents yet. Distance:'+ dist.toString());
      }
    });


  </script>
  <script>
    function updateMessage(lat,long){
    $.ajax({
        url: 'http://localhost:3000/lat/'+lat+'/long/'+long,
        type: 'GET',
        async: false,
        cache: false,
        timeout: 30000,
        error: function(){
            return true;
        },
        success: function(msg){ 
           $('#safety_message').html(msg.display_message + '<br><br>' + msg.display_description);
           document.getElementById("master").className = 'my-content '+ msg.display_style;
            if (parseFloat(msg)){
                return false;
            } else {
                return true;
            }
            setInterval(sendRequest, 5000); 
        }
    });
    };

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    //:::                                                                         :::
    //:::  This routine calculates the distance between two points (given the     :::
    //:::  latitude/longitude of those points). It is being used to calculate     :::
    //:::  the distance between two locations using GeoDataSource (TM) prodducts  :::
    //:::                                                                         :::
    //:::  Definitions:                                                           :::
    //:::    South latitudes are negative, east longitudes are positive           :::
    //:::                                                                         :::
    //:::  Passed to function:                                                    :::
    //:::    lat1, lon1 = Latitude and Longitude of point 1 (in decimal degrees)  :::
    //:::    lat2, lon2 = Latitude and Longitude of point 2 (in decimal degrees)  :::
    //:::    unit = the unit you desire for results                               :::
    //:::           where: 'M' is statute miles (default)                         :::
    //:::                  'K' is kilometers                                      :::
    //:::                  'N' is nautical miles                                  :::
    //:::                                                                         :::
    //:::  Worldwide cities and other features databases with latitude longitude  :::
    //:::  are available at https://www.geodatasource.com                         :::
    //:::                                                                         :::
    //:::  For enquiries, please contact sales@geodatasource.com                  :::
    //:::                                                                         :::
    //:::  Official Web site: https://www.geodatasource.com                       :::
    //:::                                                                         :::
    //:::               GeoDataSource.com (C) All Rights Reserved 2018            :::
    //:::                                                                         :::
    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    //Source: https://www.geodatasource.com/developers/javascript 

function distance(lat1, lon1, lat2, lon2, unit) {
	
  console.log('lat1: '+lat1);
  console.log('lon1: '+lon1);
  console.log('lat2 '+lat2);
  console.log('lon2 '+lon2);
  console.log(unit);
  if ((lat1 == lat2) && (lon1 == lon2)) {
		return 0;
	}
	else {
		var radlat1 = Math.PI * lat1/180;
		var radlat2 = Math.PI * lat2/180;
		var theta = lon1-lon2;
		var radtheta = Math.PI * theta/180;
		var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
		if (dist > 1) {
			dist = 1;
		}
		dist = Math.acos(dist);
		dist = dist * 180/Math.PI;
		dist = dist * 60 * 1.1515;
		if (unit=="K") { dist = dist * 1.609344 }
		if (unit=="N") { dist = dist * 0.8684 }
		return dist;
	}
}

</script>